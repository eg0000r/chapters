{"version":3,"sources":["roll.js","App.js","serviceWorker.js","index.js"],"names":["roll","d","y","l","Line","props","buttonDisplay","state","display","hintDisplay","hint","opacity","isYear","checked","className","isLocation","setYear","e","setState","year","target","value","toString","setLocation","location","checkLine","chapter","toLowerCase","hook","toggleHint","this","disabled","onChange","style","onClick","React","Component","Content","newElement","elements","length","concat","key","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9307f15.chunk.js","sourcesContent":["const letters = {\r\n    alpha: 'Α',\r\n    beta: 'Β',\r\n    gamma: 'Γ',\r\n    delta: 'Δ',\r\n    epsilon: 'Ε',\r\n    zeta: 'Ζ',\r\n    eta: 'Η',\r\n    theta: 'Θ',\r\n    iota: 'Ι',\r\n    kappa: 'Κ',\r\n    lambda: 'Λ',\r\n    mu: 'Μ',\r\n    nu: 'Ν',\r\n    xi: 'Ξ',\r\n    omicron: 'Ο',\r\n    pi: 'Π',\r\n    rho: 'Ρ',\r\n    sigma: 'Σ',\r\n    tau: 'Τ',\r\n    upsilon: 'Υ',\r\n    phi: 'Φ',\r\n    chi: 'Χ',\r\n    psi: 'Ψ',\r\n    omega: 'Ω'\r\n};\r\n\r\nconst roll = [\r\n    {d: letters.alpha, y: '1914', l: 'City College of New York'},\r\n    {d: letters.beta, y: '1914', l: 'New York College of Dentistry'},\r\n    {d: letters.gamma, y: '1914', l: 'New York University (Square)'},\r\n    {d: letters.delta, y: '1916', l: 'Columbia University'},\r\n    {d: letters.epsilon, y: '1917', l: 'Boston University'},\r\n    {d: letters.zeta, y: '1918', l: 'Harvard University'},\r\n    {d: letters.eta, y: '1919', l: 'Massachusetts Institute of Technology'},\r\n    {d: letters.theta, y: '1920', l: 'Armour Institute of Technology'},\r\n    {d: letters.iota, y: '1920', l: 'University of Pennsylvania'},\r\n    {d: letters.kappa, y: '1920', l: 'University of Cincinnati'},\r\n    {d: letters.lambda, y: '1921', l: 'University of Chicago'},\r\n    {d: letters.mu, y: '1921', l: 'Vanderbilt University'},\r\n    {d: letters.nu, y: '1922', l: 'University of Michigan'},\r\n    {d: letters.xi, y: '1923', l: 'Northwestern University'},\r\n    {d: letters.omicron, y: '1924', l: 'Ohio State University'},\r\n    {d: letters.pi, y: '1924', l: 'University of Illinois'},\r\n    {d: letters.rho, y: '1926', l: 'University of Texas'},\r\n    {d: letters.sigma, y: '1927', l: 'University of Southern California'},\r\n    {d: letters.tau, y: '1927', l: 'Lehigh University'},\r\n    {d: letters.upsilon, y: '1929', l: 'University of North Dakota'},\r\n    {d: letters.phi, y: '1928', l: 'University of Minnesota'},\r\n    {d: letters.chi, y: '1928', l: 'U.C.L.A.'},\r\n    {d: letters.psi, y: '1929', l: 'Carnegie Mellon University'},\r\n    {d: letters.omega, y: '1932', l: 'University of Manitoba (Canada)'}\r\n];\r\n\r\nexport default roll;","import React from 'react';\nimport roll from \"./roll\";\nimport './App.css';\n\nclass Line extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hint: false,\n      checked: false,\n      y: false,\n      l: false,\n      year: '',\n      location: ''\n    }\n  }\n  buttonDisplay = () => {\n    if (this.state.y && this.state.l) {\n      return {display: 'none'};\n    }\n    return {display: 'box'};\n  };\n  hintDisplay = () => {\n    if (this.state.hint) {\n      return {opacity: 1};\n    } else if (this.state.y && this.state.l) {\n      return {display: 'none'};\n    }\n    return {opacity: 0};\n  };\n  isYear = () => {\n    if (this.state.checked) {\n      if (this.state.y) {\n        return (\n            <span className={'correct'}>✓</span>\n        );\n      } else {\n        return (\n            <span className={'wrong'}>✕</span>\n        );\n      }\n    }\n    return (\n        <span/>\n    );\n  };\n  isLocation = () => {\n    if (this.state.checked) {\n      if (this.state.l) {\n        return (\n            <span className={'correct'}>✓</span>\n        );\n      } else {\n        return (\n            <span className={'wrong'}>✕</span>\n        );\n      }\n    }\n    return (\n        <span/>\n    );\n  };\n  setYear = (e) => {\n    this.setState({year: e.target.value.toString()});\n  };\n  setLocation = (e) => {\n    this.setState({location: e.target.value.toString()});\n  };\n  checkLine = () => {\n    this.setState({\n      checked: true,\n      y: (this.props.chapter.y === this.state.year),\n      l: (this.props.chapter.l.toLowerCase() === this.state.location.toLowerCase())\n    });\n    if ((this.props.chapter.l.toLowerCase() === this.state.location.toLowerCase()) && (this.props.chapter.y === this.state.year)) {\n      this.setState({hint: false});\n      this.props.hook();\n    }\n  };\n  toggleHint = () => {\n    this.setState({hint: !this.state.hint});\n  };\n  render() {\n    return (\n        <div>\n          <div className={'line'}>\n            <b>{this.props.chapter.d}</b>\n            <label>Year: <input disabled={this.state.y} onChange={this.setYear}/> {this.isYear()}</label>\n            <label>Location: <input disabled={this.state.l} onChange={this.setLocation}/> {this.isLocation()}</label>\n            <div style={this.buttonDisplay()} onClick={this.checkLine} className={'check'}>+</div>\n            <div style={this.buttonDisplay()} onClick={this.toggleHint} className={'check'}>?</div>\n          </div>\n          <div style={this.hintDisplay()} className={'hint'}><i>{this.props.chapter.y}</i> {this.props.chapter.l}</div>\n        </div>\n    );\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elements: [<Line key={0} hook={this.newElement} chapter={roll[0]}/>]\n    };\n  }\n  newElement = () => {\n    if (this.state.elements.length < roll.length) {\n      this.setState({elements: this.state.elements.concat([<Line key={this.state.elements.length} hook={this.newElement} chapter={roll[this.state.elements.length]}/>])});\n    }\n  };\n  render() {\n    return (\n        <div>\n          {this.state.elements}\n        </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className={'root'}>\n      <h1>Chapter Roll</h1>\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}